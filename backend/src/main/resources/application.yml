spring:
  application:
    name: ${APP_NAME:webpos}
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  
  # R2DBC 설정
  r2dbc:
    url: r2dbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:webpos}?createDatabaseIfNotExist=true
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
    pool:
      initial-size: ${DB_POOL_INITIAL_SIZE:10}
      max-size: ${DB_POOL_MAX_SIZE:30}
      max-idle-time: ${DB_POOL_MAX_IDLE_TIME:30m}
      validation-query: ${DB_VALIDATION_QUERY:SELECT 1}
  
  # Flyway 설정 (JDBC URL 사용)
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:webpos}?createDatabaseIfNotExist=true
    user: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    locations: ${FLYWAY_LOCATIONS:classpath:db/migration}
    repair: ${FLYWAY_REPAIR:true}
  
  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:10}
          max-idle: ${REDIS_POOL_MAX_IDLE:10}
          min-idle: ${REDIS_POOL_MIN_IDLE:5}
  
  # Kafka 설정
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: ${KAFKA_PRODUCER_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
      value-serializer: ${KAFKA_PRODUCER_VALUE_SERIALIZER:org.springframework.kafka.support.serializer.JsonSerializer}
    consumer:
      group-id: ${KAFKA_GROUP_ID:webpos-group}
      key-deserializer: ${KAFKA_CONSUMER_KEY_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
      value-deserializer: ${KAFKA_CONSUMER_VALUE_DESERIALIZER:org.springframework.kafka.support.serializer.JsonDeserializer}
      properties:
        spring.json.trusted.packages: ${KAFKA_TRUSTED_PACKAGES:com.gijun.backend}

# 서버 설정
server:
  port: ${SERVER_PORT:8080}
  error:
    include-message: ${SERVER_ERROR_INCLUDE_MESSAGE:always}
    include-binding-errors: ${SERVER_ERROR_INCLUDE_BINDING_ERRORS:always}

# Security 설정
jwt:
  secret: ${JWT_SECRET:your-secret-key}
  expiration: ${JWT_EXPIRATION:86400000}

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_INCLUDE:health,info,metrics,prometheus}
  endpoint:
    health:
      show-details: ${MANAGEMENT_HEALTH_SHOW_DETAILS:always}
      show-components: ${MANAGEMENT_HEALTH_SHOW_COMPONENTS:always}
  health:
    redis:
      enabled: ${MANAGEMENT_HEALTH_REDIS_ENABLED:true}
    db:
      enabled: ${MANAGEMENT_HEALTH_DB_ENABLED:true}
  prometheus:
    metrics:
      export:
        enabled: ${MANAGEMENT_PROMETHEUS_ENABLED:true}

# Logging 설정
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.gijun.webpos: ${LOG_LEVEL_APP:DEBUG}
  file:
    path: ${LOG_PATH:logs}

# Sentry 설정
sentry:
  dsn: ${SENTRY_DSN:}
  environment: ${SENTRY_ENVIRONMENT:local}

# Slack 설정
slack:
  webhook:
    url: ${SLACK_WEBHOOK_URL:}

# API Documentation
api:
  title: ${API_TITLE:WebPos API}
  description: ${API_DESCRIPTION:Hexagonal Architecture based WebPos Server API}
  version: ${API_VERSION:1.0.0}
  contact:
    name: ${API_CONTACT_NAME:WebPos Team}
    email: ${API_CONTACT_EMAIL:support@webpos.com}
    url: ${API_CONTACT_URL:https://github.com/yourusername/webpos}
  license:
    name: ${API_LICENSE_NAME:MIT License}
    url: ${API_LICENSE_URL:https://opensource.org/licenses/MIT}

springdoc:
  api-docs:
    path: ${SPRINGDOC_API_DOCS_PATH:/api-docs}
  swagger-ui:
    path: ${SPRINGDOC_SWAGGER_UI_PATH:/swagger-ui.html}
