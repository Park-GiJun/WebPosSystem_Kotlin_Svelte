// Í¥ÄÎ¶¨Ïûê Í¥ÄÎ†® API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏
import { browser } from '$app/environment';

const API_BASE = browser ? '' : 'http://localhost:8080';

async function apiRequest(endpoint, options = {}) {
    const url = `${API_BASE}/api/v1${endpoint}`;
    
    const config = {
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        },
        ...options
    };

    console.log('üåê API ÏöîÏ≤≠:', {
        url,
        method: config.method || 'GET',
        headers: config.headers
    });

    const response = await fetch(url, config);
    
    console.log('üì° API ÏùëÎãµ:', {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
    });
    
    if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå API ÏóêÎü¨ ÏùëÎãµ:', errorData);
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('‚úÖ API ÏÑ±Í≥µ ÏùëÎãµ:', data);
    return data;
}

// ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ API
export const userApi = {
    // ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå
    async getUsers(params = {}, token) {
        const queryParams = new URLSearchParams();
        Object.entries(params).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                queryParams.append(key, value);
            }
        });
        
        const queryString = queryParams.toString();
        const endpoint = `/admin/users${queryString ? `?${queryString}` : ''}`;
        
        return await apiRequest(endpoint, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    },

    // ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
    async createUser(userData, token) {
        return await apiRequest('/admin/users', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(userData)
        });
    },

    // ÏÇ¨Ïö©Ïûê ÏàòÏ†ï
    async updateUser(userId, userData, token) {
        return await apiRequest(`/admin/users/${userId}`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(userData)
        });
    },

    // ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú
    async deleteUser(userId, token) {
        return await apiRequest(`/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    },

    // ÏÇ¨Ïö©Ïûê Ïû†Í∏à Ìï¥Ï†ú
    async unlockUser(userId, token) {
        return await apiRequest(`/admin/users/${userId}/unlock`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    },

    // Ïó≠Ìï† Ìï†Îãπ
    async assignRoles(userId, roles, token) {
        return await apiRequest(`/admin/users/${userId}/roles`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ roles })
        });
    },

    // Ï°∞ÏßÅÎ≥Ñ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
    async getUsersByOrganization(params = {}, token) {
        const queryParams = new URLSearchParams();
        Object.entries(params).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                queryParams.append(key, value);
            }
        });
        
        const queryString = queryParams.toString();
        const endpoint = `/admin/users/by-organization${queryString ? `?${queryString}` : ''}`;
        
        return await apiRequest(endpoint, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    },

    // Ïó≠Ìï†Î≥Ñ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
    async getUsersByRole(params = {}, token) {
        const queryParams = new URLSearchParams();
        Object.entries(params).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                queryParams.append(key, value);
            }
        });
        
        const queryString = queryParams.toString();
        const endpoint = `/admin/users/by-role${queryString ? `?${queryString}` : ''}`;
        
        return await apiRequest(endpoint, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    }
};

// Í∂åÌïú Í¥ÄÎ¶¨ API
export const permissionApi = {
    // Í∂åÌïú Î™©Î°ù Ï°∞Ìöå
    async getPermissions(token) {
        return await apiRequest('/admin/permissions', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    },

    // ÏÇ¨Ïö©Ïûê Í∂åÌïú Ï°∞Ìöå
    async getUserPermissions(userId, token) {
        return await apiRequest(`/admin/permissions/user/${userId}`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    },

    // Ï°∞ÏßÅ Í∂åÌïú Î∂ÄÏó¨
    async grantOrganizationPermission(data, token) {
        return await apiRequest('/admin/permissions/organization', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(data)
        });
    },

    // Ï∫êÏãú Î¨¥Ìö®Ìôî
    async invalidateCache(token) {
        return await apiRequest('/admin/permissions/cache/invalidate', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    }
};

// Ï°∞ÏßÅ Í¥ÄÎ¶¨ API
export const organizationApi = {
    // Ï°∞ÏßÅ Î™©Î°ù Ï°∞Ìöå
    async getOrganizations(params = {}, token) {
        const queryParams = new URLSearchParams();
        Object.entries(params).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                queryParams.append(key, value);
            }
        });
        
        const queryString = queryParams.toString();
        const endpoint = `/admin/organizations${queryString ? `?${queryString}` : ''}`;
        
        return await apiRequest(endpoint, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    },

    // Ï°∞ÏßÅ ÏÉùÏÑ±
    async createOrganization(orgData, token) {
        return await apiRequest('/admin/organizations', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(orgData)
        });
    },

    // Ï°∞ÏßÅ ÏàòÏ†ï
    async updateOrganization(orgId, orgData, token) {
        return await apiRequest(`/admin/organizations/${orgId}`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(orgData)
        });
    },

    // Ï°∞ÏßÅ ÏÇ≠Ï†ú
    async deleteOrganization(orgId, token) {
        return await apiRequest(`/admin/organizations/${orgId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
    }
};
